"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[831],{11028:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new `Map` object.\\n- If a table is supplied, this will \\"deep copy\\" the table into this `Map`.\\n- Passing an `Array` with `key-value` pairs is also acceptable.","params":[{"name":"arg?","desc":"The initial value to use when constructing","lua_type":"table | Array"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":32,"path":"lib/Map.lua"}},{"name":"clear","desc":"Removes all key-value pairs from the `Map` object.","params":[],"returns":[],"function_type":"method","source":{"line":53,"path":"lib/Map.lua"}},{"name":"delete","desc":"Returns `true` if an element in the `Map` object existed and has been removed, or `false` if the element does not exist.\\n`map.has(key)` will return `false` afterwards.","params":[{"name":"key","desc":"The key of the element to remove from the `Map` object.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":62,"path":"lib/Map.lua"}},{"name":"get","desc":"Returns the value associated to the passed key, or `nil` if there is none.","params":[{"name":"key","desc":"The key of the element to return from the `Map` object.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"method","source":{"line":74,"path":"lib/Map.lua"}},{"name":"has","desc":"Returns a boolean indicating whether a value has been associated with the passed key in the `Map` object or not.","params":[{"name":"key","desc":"The key of the element to test for presence in the `Map` object.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":81,"path":"lib/Map.lua"}},{"name":"set","desc":"Sets the value for the passed key in the `Map` object. Returns the `Map` object.","params":[{"name":"key","desc":"The key of the element to add to the `Map` object. The key may be of any type.","lua_type":"any"},{"name":"value","desc":"The value of the element to add to the `Map` object. The value may be of any type","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"method","source":{"line":89,"path":"lib/Map.lua"}},{"name":"forEach","desc":"Calls `callbackFn` once for each key-value pair present in the `Map` object, in insertion order.\\nIf `thisArg` parameter is provided to `forEach`, it will be used as the `self` value for each callback.\\n- `value` (optional) -- Value of each iteration.\\n- `key` (optional) -- Key of each iteration.\\n- `map` (optional) -- The `Map` being iterated.","params":[{"name":"callbackFn","desc":"Function to execute for each entry in the map. It takes the following arguments:","lua_type":"fun(value: any, key: any, map: any)"},{"name":"thisArg?","desc":"Value to use as `self` when excuting `callback`.","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":104,"path":"lib/Map.lua"}}],"properties":[{"name":"size","desc":"Returns the number of key/value pairs in the `Map` object.","lua_type":"number","readonly":true,"source":{"line":9,"path":"lib/Map.lua"}},{"name":"_table","desc":"","lua_type":"table<any, any>","private":true,"source":{"line":13,"path":"lib/Map.lua"}},{"name":"__type","desc":"","lua_type":"\\"Map\\"","private":true,"source":{"line":17,"path":"lib/Map.lua"}}],"types":[],"name":"Map","desc":"","source":{"line":4,"path":"lib/Map.lua"}}')}}]);