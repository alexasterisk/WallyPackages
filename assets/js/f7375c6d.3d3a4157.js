"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[90],{14245:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new `Set` object.\\n- If you don\'t specify this parameter, or its value is `null`, the new `Set` is empty.","params":[{"name":"iterable?","desc":"If an iterable obejct is passed, all of its elements will be added to the new `Set`.","lua_type":"IterableObject"}],"returns":[],"function_type":"static","source":{"line":30,"path":"lib/Set.lua"}},{"name":"add","desc":"Inserts a new element with a specified value in to a `Set` object, if there isn\'t an element with the same value already in the `Set`.","params":[{"name":"value","desc":"The value of the element to add to the `Set` object.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Set"}],"function_type":"method","source":{"line":55,"path":"lib/Set.lua"}},{"name":"clear","desc":"Removes all elements from the `Set` object.","params":[],"returns":[],"function_type":"method","source":{"line":64,"path":"lib/Set.lua"}},{"name":"delete","desc":"Removes the element associated to the `value` and returns a boolean asserting whether an element was successfully removed or not.\\n- `Set.has(value)` will return `false` afterwards.","params":[{"name":"value","desc":"The value to remove from `Set`.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":73,"path":"lib/Set.lua"}},{"name":"has","desc":"Returns a boolean asserting whether an element is present with the given value in the `Set` object or not.","params":[{"name":"value","desc":"The value to test for presence in the `Set` object.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":85,"path":"lib/Set.lua"}},{"name":"forEach","desc":"Calls `callbackFn` once for each value present in the `Set` object, in insertion order.\\n- If a `thisArg` parameter is provided, it will be used as the `self` value for each invocation of `callbackFn`.\\n- `value`, `key` (optional) -- The current element being processed in the `Set`. As there are no keys in `Set`, the value is passed for both arguments.\\n- `set` (optional) -- The `Set` object which `forEach()` was called upon.","params":[{"name":"callback","desc":"Function to execute for each element, taking three arguments:","lua_type":"fun(value: any, key: any, set: Set)"},{"name":"thisArg?","desc":"Value to use as `self` when executing `callbackFn`.","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":95,"path":"lib/Set.lua"}}],"properties":[{"name":"size","desc":"Returns the number of values in the `Set` object.","lua_type":"number","readonly":true,"source":{"line":9,"path":"lib/Set.lua"}},{"name":"_table","desc":"","lua_type":"table<any, any>","private":true,"source":{"line":13,"path":"lib/Set.lua"}},{"name":"__type","desc":"","lua_type":"\\"Map\\"","private":true,"source":{"line":17,"path":"lib/Set.lua"}}],"types":[],"name":"Set","desc":"","source":{"line":4,"path":"lib/Set.lua"}}')}}]);