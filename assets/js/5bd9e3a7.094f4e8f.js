"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[358],{57160:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new `Array` object.\\n- If a number is supplied, this will set the max length to this number.\\n- If a table is supplied, this will \\"deep copy\\" the table into this `Array`.","params":[{"name":"arg?","desc":"The initial value to use when constructing.","lua_type":"number | IterableObject"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"static","source":{"line":39,"path":"lib/Array.lua"}},{"name":"from","desc":"Creates a new `Array` instance from an array-like object or iterable object.","params":[{"name":"arrayLike","desc":"An iterable or array-like object to convert to an array.","lua_type":"IterableObject"},{"name":"mapFn?","desc":"Map function to call on every element of the array.","lua_type":"fun(element: any, index: any, thisArg: any)"},{"name":"thisArg?","desc":"Value to use as `self` when executing `mapFn`.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"static","source":{"line":67,"path":"lib/Array.lua"}},{"name":"isArray","desc":"Returns `true` if the argument is an array, or `false` otherwise.","params":[{"name":"value","desc":"The value to be checked.","lua_type":"Array | any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":75,"path":"lib/Array.lua"}},{"name":"of","desc":"Creates a new `Array` instance with a variable number of arguments, regardless of number or type of the arguments.","params":[{"name":"...","desc":"Elements used to create the array.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"static","source":{"line":82,"path":"lib/Array.lua"}},{"name":"at","desc":"Returns the array item at the given index. Accepts negative integers, which count back from the last item.\\n- This supports relative indexing from the end of the array when passed a negative index.","params":[{"name":"index","desc":"The index (position) of the array element to be returned.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"method","source":{"line":94,"path":"lib/Array.lua"}},{"name":"fill","desc":"Fills all the elements on an array from a start index to an end index with a static value.","params":[{"name":"value","desc":"Value to fill the array with. (Note all elements in the array will be this exact value.)","lua_type":"any"},{"name":"start?","desc":"Start index (inclusive), default `0`.","lua_type":"number"},{"name":"endN?","desc":"End index (inclusive), default `array.length`.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":103,"path":"lib/Array.lua"}},{"name":"find","desc":"Returns the value of the first element in the array that satisfies the provided testing function, or `nil` if no appropriate element is found.\\n- `element` -- The current element in the array.\\n- `index` -- The index (position) of the current element in the array.\\n- `array` -- The array that `find` was called on.\\n- The callback must return a truthy value to indicate a matching element has been found.","params":[{"name":"callbackFn","desc":"Function to execute on each value in the array. The function is called with the following arguments:","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"Object to use as `self` inside `callbackFn`.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"method","source":{"line":124,"path":"lib/Array.lua"}},{"name":"findLast","desc":"Returns the index of the last element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\\n- `element` -- The current element in the array.\\n- `index` -- The index (position) of the current element in the array.\\n- `array` -- The array that `findLast()` was called on.\\n- The callback must return a truthy value to indicate an appropriate element has been found. The value of this element is returned by `findLast()`.","params":[{"name":"callbackFn","desc":"A function used to test elements in the array. The function is called with the following arguments:","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"Object to use as `self` inside `callbackFn`.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any?"}],"function_type":"method","source":{"line":141,"path":"lib/Array.lua"}},{"name":"groupToMap","desc":"Groups the elements of an array into a `Map` according to values returned by a test function.\\n- `element` -- The current element in the array.\\n- `index` -- The index (position) of the current element in the array.\\n- `array` -- The array that `groupToMap()` was called on.\\n- The value (object or primitive) returned from the callback indicates the group of the current element.","params":[{"name":"callbackFn","desc":"Function to execute on each element in the array. The function is called with the following arguments:","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"Object to use as `self` inside `callbackFn`.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"method","source":{"line":158,"path":"lib/Array.lua"}},{"name":"toString","desc":"Returns a string representation of an array.","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":174,"path":"lib/Array.lua"}},{"name":"pop","desc":"Removes the last element from an array and returns it.\\nIf the array is empty, nil is returned and the array is not modified.","params":[],"returns":[{"desc":"","lua_type":"any | nil"}],"function_type":"method","source":{"line":181,"path":"lib/Array.lua"}},{"name":"push","desc":"Appends new elements to the end of an array, and returns the new length of the array.","params":[{"name":"...","desc":"New elements to add to the array.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":194,"path":"lib/Array.lua"}},{"name":"concat","desc":"Returns a new array that is the calling array joined with other array(s) and/or value(s).\\n- If all `valueN` parameters are omitted, `concat` returns a \\"shallow copy\\" of the existing array on which it is called.","params":[{"name":"...","desc":"Arrays and/or values to concatenate into a new array.","lua_type":"Array | any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":206,"path":"lib/Array.lua"}},{"name":"copyWithin","desc":"Copies a sequence of array elements within an array.","params":[{"name":"target","desc":"If target is negative, it is treated as `length+target` where length is the length of the array.","lua_type":"number"},{"name":"start","desc":"If start is negative, it is treated as `length+start`.","lua_type":"number"},{"name":"finish?","desc":"If finish is negative, it is treated as `length+finish`. If not specified, length of the self object is used as its default value.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":225,"path":"lib/Array.lua"}},{"name":"join","desc":"- If omitted, the array elements are separated with a comma.","params":[{"name":"separator?","desc":"A string used to separate one element of the array from the next in the resulting string.","lua_type":"string"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":243,"path":"lib/Array.lua"}},{"name":"reverse","desc":"Reverses the elements in an array in place.\\nThis method mutates the array and returns a reference to the same array.","params":[],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":251,"path":"lib/Array.lua"}},{"name":"slice","desc":"Returns a copy of a section of an array.\\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\\nFor example, -2 refers to the second to last element of the array.\\n- If start is nil, then the slice begins at index 1.\\n- If finish is nil, then the slice extends to the end of the array.","params":[{"name":"start?","desc":"The beginning index of the specified portion of the array.","lua_type":"number"},{"name":"finish?","desc":"The end index of the specified portion of the array. This is exclusive of the element at the index \\"end\\".","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":268,"path":"lib/Array.lua"}},{"name":"sort","desc":"Sorts an array in place.\\nThis method mutates the array and returns a reference to the same array.\\n- If omitted, the elements are sorted in ascending, ASCII character order.","params":[{"name":"compareFn?","desc":"Function used to determine the order of the elements. It is expected to return false if the first argument is less than the second argument and a true otherwise.","lua_type":"fun(a: any, b: any)"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":295,"path":"lib/Array.lua"}},{"name":"splice","desc":"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.","params":[{"name":"start","desc":"The one-based location in the array from which to start removing elements.","lua_type":"number"},{"name":"deleteCount","desc":"The number of elements to remove.","lua_type":"number"},{"name":"...","desc":"Elements to insert into the array in place of the deleted elements.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":307,"path":"lib/Array.lua"}},{"name":"unshift","desc":"","params":[{"name":"...","desc":"Elements to inster at the start of the array.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":333,"path":"lib/Array.lua"}},{"name":"indexOf","desc":"Returns the index of the first occurence of a value in an array, or nil if it is not present.\\n- If fromIndex is omitted, the search starts at index 1.","params":[{"name":"searchElement","desc":"The value to locate in the array.","lua_type":"any"},{"name":"fromIndex?","desc":"The array index at which to begin the search.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","source":{"line":347,"path":"lib/Array.lua"}},{"name":"lastIndexOf","desc":"Returns the index of the last occurence of a value in an array, or nil if it is not present.\\n- If fromIndex is omitted, the search starts at the last index in the array.","params":[{"name":"searchElement","desc":"The value to locate in the array.","lua_type":"any"},{"name":"fromIndex?","desc":"The array index at which to begin the search.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"method","source":{"line":356,"path":"lib/Array.lua"}},{"name":"flat","desc":"Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.","params":[{"name":"depth?","desc":"The maximum recursion depth","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":368,"path":"lib/Array.lua"}},{"name":"every","desc":"Determines whether all the members of an array satisfy the specified test.\\n- `element` -- The current element being processed in the array.\\n- `index` -- The index of the current element being processed in the array.\\n- `array` -- The array `every` was called upon.\\n- The every method calls the predicate function for each element in the array until the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\\n- If thisArg is omitted, nil will be used as the self value.","params":[{"name":"predicate","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"An object to which the self keyword can refer in the predicate function.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":382,"path":"lib/Array.lua"}},{"name":"some","desc":"Determines whether the specified callback function returns true for any element of an array.\\n- `element` -- The current element being processed in the array.\\n- `index` -- The index of the current element being processed in the array.\\n- `array` -- The array `some` was called upon.\\n- The every method calls the predicate function for each element in the array until the predicate returns a value which is coercible to the Boolean value true, or until the end of the array.\\n- If thisArg is omitted, nil will be used as the self value.","params":[{"name":"predicate","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"An object to which the self keyword can refer in the predicate function.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":400,"path":"lib/Array.lua"}},{"name":"forEach","desc":"Performs the specified action for each element in an array.\\n- `element` -- The current element being processed in the array.\\n- `index` -- The index of the current element being processed in the array.\\n- `array` -- The array `forEach` was called upon.\\n- forEach calls the callbackFn function one time for each element in the array.\\n- If thisArg is omitted, nil will be used as the self keyword.","params":[{"name":"callbackFn","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"An object to which the self keyword can refer in the callbackFn function.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":418,"path":"lib/Array.lua"}},{"name":"map","desc":"Calls a defined callback function on each element of an array and returns an array that contains the results.\\n- `element` -- The current element being processed in the array.\\n- `index` -- The index of the current element being processed in the array.\\n- `array` -- The array `map` was called upon.\\n- The map method calls the callbackFn function one time for each element in the array.\\n- If thisArg is omitted, nil will be used as the self keyword.","params":[{"name":"callbackFn","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"An object to which the self keyword can refer in the callbackFn function.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":433,"path":"lib/Array.lua"}},{"name":"flatMap","desc":"Calls a defined callback function on each element of an array. Then, flattens the result into a new array.\\nThis is identical to a map followed by flat with depth 1.\\n- `element` -- The current element being processed in the array.\\n- `index` -- The index of the current element being processed in the array.\\n- `array` -- The array `every` was called upon.\\n- The flatMap method calls the callback function one time for each element in the array.\\n- If thisArg is omitted, nil will be used as the self keyword.","params":[{"name":"callback","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"An object to which the self keyword can refer in the callback function.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":454,"path":"lib/Array.lua"}},{"name":"filter","desc":"Returns the elements of an array that meet the condition specified in a predicate function.\\n- `element` -- The current element being processed in the array.\\n- `index` -- The index of the current element being processed in the array.\\n- `array` -- The array `filter` was called upon.\\n- The filter method calls the predicate function one time for each element in the array.\\n- If thisArg is omitted, nil will be used as the self keyword.","params":[{"name":"predicate","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"thisArg?","desc":"An object to which the self keyword can refer in the predicate function.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":468,"path":"lib/Array.lua"}},{"name":"reduce","desc":"Calls the specified callback function for all the elements in an array.\\n- The return value of the callbackFn function is the accumulated result, and is provided in the next call to the callbackFn function.\\n- `previousValue` -- The value resulting from the previous call to `callbackFn`. On first call, `initialValue` if specified, otherwise the value of `array[0]`.\\n- `currentValue` -- The value of the current index. On first call, the value of `index[0]` if an `initialValue` was specified, otherwise the value of `array[1]`.\\n- `currentIndex` -- The index position of `currentValue` in the array. On first call, `0` if `initialValue` was specified, otherwise `1`.\\n- `array` -- The array being traversed.\\n- The reduce method calls the callbackFn function one time for each element in the array.\\n- If omitted, the first call to the callbackFn function provides this value as an argument instead of an array value.","params":[{"name":"callbackFn","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"initialValue?","desc":"If initialValue is specified, it is used as the initial value to start the accumulation.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":489,"path":"lib/Array.lua"}},{"name":"reduceRight","desc":"Calls the specified callback function for all the elements in the array, in descending order.\\n- The return value of the callbackFn function is the accumulated result, and is provided in the next call to the callbackFn function.\\n- `previousValue` -- The value resulting from the previous call to `callbackFn`. On first call, `initialValue` if specified, otherwise the value of `array[0]`.\\n- `currentValue` -- The value of the current index. On first call, the value of `index[0]` if an `initialValue` was specified, otherwise the value of `array[1]`.\\n- `currentIndex` -- The index position of `currentValue` in the array. On first call, `0` if `initialValue` was specified, otherwise `1`.\\n- `array` -- The array being traversed.--- - The reduceRight method calls the callbackFn function one time for each element in the array.\\n- If omitted, the first call to the callbackFn function provides this value as an argument instead of an array value.","params":[{"name":"callbackFn","desc":"A function that accepts up to three arguments.","lua_type":"fun(element: any, index: number, array: Array)"},{"name":"initialValue?","desc":"If initialValue is specified, it is used as the initial value to start the accumulation.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Array"}],"function_type":"method","source":{"line":506,"path":"lib/Array.lua"}},{"name":"includes","desc":"Determines whether an array includes a certain element, returning true or false as appropriate.","params":[{"name":"searchElement","desc":"The element to search for.","lua_type":"any"},{"name":"fromIndex?","desc":"The position in this array at which to beign searching for searchElement.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":517,"path":"lib/Array.lua"}}],"properties":[{"name":"length","desc":"Reflects the number of elements in an array.","lua_type":"number","readonly":true,"source":{"line":10,"path":"lib/Array.lua"}},{"name":"_maxLength","desc":"The maximum length of the array.","lua_type":"number","private":true,"source":{"line":15,"path":"lib/Array.lua"}},{"name":"_table","desc":"","lua_type":"table<number, any>","private":true,"source":{"line":19,"path":"lib/Array.lua"}},{"name":"__type","desc":"","lua_type":"\\"Array\\"","private":true,"source":{"line":23,"path":"lib/Array.lua"}}],"types":[],"name":"Array","desc":"","source":{"line":5,"path":"lib/Array.lua"}}')}}]);